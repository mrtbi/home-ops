---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

tasks:
  talos:
    desc: Bootstrap Talos
    prompt: Bootstrap Talos ...?
    vars:
      RANDOM_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | sort -R | head -n 1
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.RANDOM_CONTROLLER}} get machineconfig
      - which jq talosctl
    cmds:
      - echo "Bootstrapping Talos on {{.RANDOM_CONTROLLER}}..."
      - until talosctl --nodes {{.RANDOM_CONTROLLER}} bootstrap; do sleep 5; done
      - talosctl kubeconfig --nodes {{.RANDOM_CONTROLLER}} --force {{.KUBERNETES_DIR}}

  apps:
    desc: Bootstrap Kubernetes Apps
    prompt: Bootstrap Kubernetes Apps ...?
    preconditions:
      - which helmfile jq kubectl infisical talosctl
      - test -f {{.K8S_DIR}}/bootstrap/helmfile.yaml
      - test -f {{.K8S_DIR}}/bootstrap/resources.yaml
      - infisical user get token --silent
      - talosctl config info
      #- talosctl --nodes {{.RANDOM_CONTROLLER}} get machineconfig
    env:
      RANDOM_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | sort -R | head -n 1
    cmds:
      #- kubectl config set-cluster {{.CONTEXT}} --server https://{{.RANDOM_CONTROLLER}}:6443
      #- defer: talosctl kubeconfig --nodes {{.RANDOM_CONTROLLER}} --force {{.KUBERNETES_DIR}}
      #- until kubectl wait nodes --for=condition=Ready=False --all --timeout=10m; do sleep 5; done
      - infisical run --path /bootstrap --env prod --command "export KUBECONFIG=./kubernetes/kubeconfig && envsubst < ./kubernetes/bootstrap/resources.yaml | kubectl apply -f -"
      - helmfile --file {{.K8S_DIR}}/bootstrap/helmfile.yaml sync --hide-notes